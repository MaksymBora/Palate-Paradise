{"mappings":"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","sources":["src/favorites.js","src/js/favorite/favorite-main.js","src/js/favorite/localStorageUtils.js","src/js/favorite/handleCategotyFilter.js","src/js/favorite/utils.js","src/js/favorite/display-favorites.js","src/js/favorite/updateCategoryList.js"],"sourcesContent":["import './js/mobile-menu';\nimport './js/favorite/favorite-main';\n","import RecipeApiService from '../service/service-api';\nimport refs from './constants';\nimport { getFromLocalStorage } from '../favorite/localStorageUtils';\nimport { handleCategoryFilter } from '../favorite/handleCategotyFilter';\nimport { displayFavorites } from '../favorite/display-favorites';\nimport {\n  updateCategoryList,\n  renderCategories,\n} from '../favorite/updateCategoryList';\nimport { showLoader, hideLoader } from '../loader';\n\nconst recipeApiSeriсe = new RecipeApiService();\n\n//\n// Add accent color on load page.\n//\nfunction modifyClassesOnLoad() {\n  const links = document.querySelectorAll('.menu-nav-links');\n\n  if (links[0].classList.contains('header-accent')) {\n    links[0].classList.remove('header-accent');\n\n    if (links.length > 1) {\n      links[1].classList.add('header-accent');\n    }\n  }\n}\n\n// Вызываем функцию при загрузке страницы\nwindow.addEventListener('load', modifyClassesOnLoad);\n\n// ---------------------------------------\n// Imitation adding data to LocalStorage\n// ---------------------------------------\nrecipeApiSeriсe.getRecipe().then(response => {\n  const arr = response.results;\n\n  const FAV_DATA = 'favorites-data';\n  const toStorage = [];\n\n  for (let i = 0; i < 6; i++) {\n    const { _id, title, category, rating, preview, description } = arr[i];\n    for (let j = 0; j < 5; j++) {\n      toStorage.push({\n        _id,\n        title,\n        category,\n        rating,\n        preview,\n        description,\n      });\n    }\n  }\n\n  localStorage.setItem(FAV_DATA, JSON.stringify(toStorage));\n});\n\n/**\n * Refreshes the favorite recipes page.\n * Generates category markup and the \"All categories\" button based on the saved data in localStorage.\n * Then displays the favorite recipes.\n */\nfunction onFavoritesReload() {\n  showLoader();\n\n  const categoryMarkup = createCategoryList();\n  const allCatBtn = `<button class=\"fav-button common-btn is-active\" name=\"main-cat-btn\">All categories</button>`;\n\n  const data = getFromLocalStorage('favorites-data');\n  refs.recipesListContainer.innerHTML = '';\n  refs.categoriesContainer.innerHTML =\n    data && data.length ? `${allCatBtn}${categoryMarkup}` : '';\n\n  displayFavorites();\n\n  hideLoader();\n}\n\n/**\n * Generates the markup for the list of unique categories from favorites data stored in localStorage.\n * {string} The category list markup or an empty string if there is no data.\n */\nfunction createCategoryList() {\n  const storage = localStorage.getItem('favorites-data');\n  const data = JSON.parse(storage);\n\n  if (!data || data.length === 0) return '';\n\n  const uniqueCategories = data\n    .flatMap(recipe => recipe.category)\n    .filter((category, index, array) => array.indexOf(category) === index);\n  return uniqueCategories.reduce(\n    (categoryMarkup, category) => categoryMarkup + renderCategories(category),\n    ''\n  );\n}\n\n/**\n * Removes the favorite recipe from localStorage and reloads the favorites list.\n *  currentBtn - The current button element representing the favorite recipe.\n */\nfunction removeFavorite(currentBtn) {\n  const recipeInfo = JSON.parse(currentBtn.dataset.info);\n  const storage = JSON.parse(localStorage.getItem('favorites-data'));\n  localStorage.setItem(\n    'favorites-data',\n    JSON.stringify(storage.filter(el => el.id !== recipeInfo.id))\n  );\n  onFavoritesReload();\n}\n\n/**\n * Handles the click event on the recipe buttons in the favorites view.\n * event - The click event object.\n */\nfunction handleRecipeButtonEvent({ target }) {\n  if (!target.closest('button')) return;\n  const currentBtn = target.closest('button');\n\n  if (currentBtn.name === 'favorites-data') {\n    removeFavorite(currentBtn);\n    updateCategoryList(target);\n  }\n  if (currentBtn.name === 'details') {\n    console.log('modal here');\n  }\n}\n\n// Add event listeners to the corresponding elements when the DOM is fully loaded.\n\n// Event listener for handling recipe button clicks in the favorites view.\nrefs.renderedRecipesBox.addEventListener('click', handleRecipeButtonEvent);\n\n// Event listener for handling category filter clicks in the favorites view.\nrefs.categoriesList.addEventListener('click', handleCategoryFilter);\n\n// Event listener for reloading the favorites view when the DOM is fully loaded.\ndocument.addEventListener('DOMContentLoaded', onFavoritesReload);\n","export function saveToLocalStorage(key, data) {\n  localStorage.setItem(key, JSON.stringify(data));\n}\n\nexport function getFromLocalStorage(key) {\n  const data = localStorage.getItem(key);\n  return JSON.parse(data);\n}\n","import refs from './constants';\nimport { countPage, groupArrayIntoChunks } from '../favorite/utils';\nimport { renderingFavRec } from '../favorite/rendering-fav';\nimport createPagination from '../favorite/pagination';\nimport { displayFavorites } from '../favorite/display-favorites';\nimport { showLoader, hideLoader } from '../loader';\n\nlet currentBtn = '';\n\n/**\n * Toggles the 'is-active' class on the target element.\n */\nfunction toggleActiveClass({ target }) {\n  const btn = document.querySelector('.is-active');\n  if (!btn) refs.allButton.classList.add('is-active');\n  else btn.classList.remove('is-active');\n  target.classList.add('is-active');\n}\n\n/**\n * Handles the category filter event.\n * {Event} evt - The event object.\n */\nexport function handleCategoryFilter(evt) {\n  showLoader();\n\n  if (evt.target.classList.contains('is-active')) return;\n\n  let data = [];\n  let categoryRecipes;\n  refs.recipesListContainer.innerHTML = '';\n\n  if (evt !== Number(evt) && evt.target.nodeName === 'BUTTON') {\n    toggleActiveClass(evt);\n    currentBtn =\n      evt.target.name === 'main-cat-btn' ? '' : evt.target.textContent;\n  }\n\n  const storage = localStorage.getItem('favorites-data');\n  data = JSON.parse(storage);\n\n  if (!data || data.length === 0) {\n    refs.categoriesContainer.style.display = 'none';\n    return;\n  }\n\n  if (!currentBtn) {\n    displayFavorites();\n    return;\n  }\n\n  categoryRecipes = [...data.filter(recipe => recipe.category === currentBtn)];\n\n  let pageSet = 1;\n\n  if (Number(evt) === evt) pageSet = evt;\n\n  const perPage = countPage();\n  const objData = groupArrayIntoChunks(categoryRecipes, perPage);\n  const totalPages = Object.keys(objData).length;\n\n  refs.paginationElement.style.display = totalPages > 1 ? 'block' : 'none';\n  createPagination(pageSet, perPage, totalPages, displayFavorites);\n\n  const listMarkup = objData[pageSet].reduce(\n    (markup, { title, description, preview, rating, id, category }) =>\n      markup +\n      renderingFavRec(title, description, preview, rating, id, category),\n    ''\n  );\n\n  refs.recipesListContainer.innerHTML = listMarkup;\n\n  hideLoader();\n}\n","// Calculates the number of items per page\nexport function countPage() {\n  return window.innerWidth < 768 ? 9 : 12;\n}\n\n/**\n * Groups an array into chunks of a specified size.\n *\n *  array - The array to be grouped into chunks.\n *  chunkSize - The size of each chunk(Part).\n * {Object} An object containing the grouped chunks, with chunk numbers as keys.\n */\nexport function groupArrayIntoChunks(array, chunkSize) {\n  const groupedChunks = {};\n  for (let i = 0; i < array.length; i += chunkSize) {\n    const chunkNumber = Math.floor(i / chunkSize) + 1;\n    groupedChunks[chunkNumber] = array.slice(i, i + chunkSize);\n  }\n  return groupedChunks;\n}\n","import refs from './constants';\nimport { getFromLocalStorage } from '../favorite/localStorageUtils';\nimport { countPage, groupArrayIntoChunks } from '../favorite/utils';\nimport createPagination from '../favorite/pagination';\nimport { renderingFavRec } from '../favorite/rendering-fav';\nimport { showLoader, hideLoader } from '../loader';\n\nexport function displayFavorites(pageSet = 1) {\n  showLoader();\n\n  const data = getFromLocalStorage('favorites-data');\n\n  // Show or hide the \"All\" button based on whether there is data in localStorage.\n  refs.allButton.style.display = data && data.length ? 'block' : 'none';\n\n  // Display a message and hide the \"All\" button if there is no data in localStorage or the data array is empty.\n  if (!data || data.length === 0) {\n    refs.noFavoritesMessage.classList.remove('visually-hidden');\n    refs.allButton.classList.add('visually-hidden');\n    if (window.innerWidth < 768)\n      refs.heroImage.classList.add('visually-hidden');\n    return;\n  }\n\n  const perPage = countPage();\n  const objData = groupArrayIntoChunks(data, perPage);\n  const totalPages = Object.keys(objData).length;\n\n  refs.paginationElement.style.display = totalPages > 1 ? 'block' : 'none';\n  createPagination(pageSet, perPage, totalPages, displayFavorites);\n\n  const listMarkup = objData[pageSet]\n    .map(({ title, description, preview, rating, id, category }) =>\n      renderingFavRec(title, description, preview, rating, id, category)\n    )\n    .join('');\n\n  refs.recipesListContainer.innerHTML = listMarkup;\n  refs.noFavoritesMessage.classList.add('visually-hidden');\n\n  hideLoader();\n}\n","import { getFromLocalStorage } from '../favorite/localStorageUtils';\nimport { showLoader, hideLoader } from '../loader';\n\n/**\n * Generates the markup for a category button.\n * {string} category - The category name.\n * return {string} The category button markup.\n */\nexport function renderCategories(category) {\n  return `<button class=\"fav-button\">${category}</button>`;\n}\n\n/**\n * Updates the category list in the favorites view based on the selected recipe's category.\n *  target - The target element representing the selected recipe.\n */\nexport function updateCategoryList(target) {\n  showLoader();\n\n  const currentRec = target.closest('div.recipe-item').dataset.category;\n  const storageItems = getFromLocalStorage('favorites-data');\n  const isCategoryLocal = storageItems.find(el => el.category === currentRec);\n  const isCategoryRendered = [...refs.categoriesContainer.children].find(\n    el => el.textContent === currentRec\n  );\n\n  if (!isCategoryLocal && isCategoryRendered) isCategoryRendered.remove();\n  else if (isCategoryLocal && !isCategoryRendered)\n    refs.categoriesContainer.insertAdjacentHTML(\n      'beforeend',\n      renderCategories(currentRec)\n    );\n\n  refs.allButton.style.display =\n    storageItems && storageItems.length ? 'block' : 'none';\n\n  hideLoader();\n}\n"],"names":["parcelRequire","$d3Gjh","$3a34280a53c04ab7$export$602bc7b349337fec","key","data","localStorage","getItem","JSON","parse","$8nrFW","$319ca2c7fb7e9c69$export$8242f68f012ef212","window","innerWidth","$319ca2c7fb7e9c69$export$56232b55f4742cda","array","chunkSize","groupedChunks","i","length","Math","floor","slice","$5Xw1W","$13da8db5e898e272$export$4c708a11c3ac73b5","pageSet","arguments","$kvC6y","showLoader","default","allButton","style","display","noFavoritesMessage","classList","remove","add","heroImage","perPage","objData","totalPages","Object","keys","paginationElement","$au4Ux","listMarkup","map","param","title","description","preview","rating","id","category","$2lkGM","renderingFavRec","join","recipesListContainer","innerHTML","hideLoader","$f1ec916d23661196$var$currentBtn","$c03df47b46ce8e4c$export$f20c709553293f6e","concat","$c03df47b46ce8e4c$export$5386e614270b0ccf","target","currentRec","closest","dataset","storageItems","isCategoryLocal","find","el","isCategoryRendered","$parcel$interopDefault","refs","categoriesContainer","children","textContent","insertAdjacentHTML","$b60f03cd1e1dbfd2$var$onFavoritesReload","categoryMarkup","storage","flatMap","recipe","filter","index","indexOf","reduce","$b60f03cd1e1dbfd2$var$createCategoryList","addEventListener","links","document","querySelectorAll","contains","getRecipe","then","response","arr","results","toStorage","_i","_id","j","push","setItem","stringify","renderedRecipesBox","currentBtn","name","recipeInfo","info","$b60f03cd1e1dbfd2$var$removeFavorite","console","log","categoriesList","evt","categoryRecipes","btn","Number","nodeName","querySelector","markup"],"version":3,"file":"favorites.a385b34e.js.map"}