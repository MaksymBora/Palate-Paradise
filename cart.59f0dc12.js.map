{"mappings":"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","sources":["src/js/cart/cart-main.js","src/js/cart/modal-order.js"],"sourcesContent":["import RecipeApiService from '../service/service-api';\nimport { notifyError } from '../notifications';\nimport '../../js/theme-switch';\nimport './modal-order';\nconst apiRecipe = new RecipeApiService();\n\nconst cartWrapper = document.querySelector('.cart-recipe-list');\n\napiRecipe.limit = 9;\n\n// Rendering cards\nasync function fillCartWrap() {\n  try {\n    const recipe = await apiRecipe.getRecipe();\n\n    return fillCart(recipe);\n  } catch (error) {\n    notifyError();\n  }\n}\n\nfillCartWrap();\n\n//Make markUp in cart\nfunction fillCart(resp) {\n  const takeValues = ({\n    thumb,\n    area,\n    rating,\n    description,\n    title,\n    category,\n  }) => {\n    return `<li class=\"cart-recipe-item\">\n        <img class=\"cart-recipe-img\" src=\"${thumb}\" alt = \"${category}\"></img>\n        <div class = \"cart-text-wrap\">\n        <h3 class=\"cart-recipe-title\">${title}</h3>\n        <p class=\"cart-recipe-area\"><b>Area:</b> ${area}</p>\n        <p class=\"cart-recipe-descr\"><b>Description:</b> ${description}</p>\n        <p class=\"cart-recipe-rating\"><b>Rating:</b> ${rating}</p>\n        </div>\n        <button id=\"cart-order\" type=\"button\" class=\"hero__button button cart-recipe-btn\" data-modal-order-cart>\n        Order now\n        </button>\n      </li>`;\n  };\n  const { results } = resp;\n  const markUpCart = results.map(obj => takeValues(obj)).join('');\n  cartWrapper.innerHTML = markUpCart;\n}\n","import Notiflix from 'notiflix';\n\nconst refs = {\n  //   openModalOrderBtn: document.querySelector('[data-modal-order-cart]'),\n  closeModalOrderBtn: document.querySelector('[data-modal-order-close]'),\n  modalOrder: document.querySelector('[data-modal-order-backdrop]'),\n  modalOrderForm: document.querySelector('.modal-order-form'),\n  modalOrderSubmitBtn: document.querySelector('.modal-order-form__button'),\n};\n\nconst ORDER_FORM_KEY = 'order-form-state';\n\n// refs.openModalOrderBtn.addEventListener('click', onToggleModalOrder);\nrefs.closeModalOrderBtn.addEventListener('click', onToggleModalOrder);\nrefs.modalOrderForm.addEventListener('input', onTextareaInput);\nrefs.modalOrderForm.addEventListener('submit', onFormSubmit);\n\nsetTimeout(() => {\n  const modalOrder = document.querySelectorAll('button[data-modal-order-cart]');\n  modalOrder.forEach(button => {\n    button.addEventListener('click', onToggleModalOrder);\n  });\n\n  function onToggleModalOrder() {\n    refs.modalOrder.classList.toggle('is-hidden');\n\n    // Clear the form inputs when the form is closed\n    if (refs.modalOrder.classList.contains('is-hidden')) {\n      refs.modalOrderForm.reset();\n    }\n  }\n}, 2000);\n\n// Open and close modal-order modal window\nfunction onToggleModalOrder() {\n  refs.modalOrder.classList.toggle('is-hidden');\n\n  // Clear the form inputs when the form is closed\n  if (refs.modalOrder.classList.contains('is-hidden')) {\n    refs.modalOrderForm.reset();\n  }\n}\n\nonClickPageReload();\n\n// Track the input event on the form and keep input data in localStorage\nfunction onTextareaInput(evt) {\n  const { name, phone, email, comment } = evt.currentTarget.elements;\n  const orderFormState = {\n    name: name.value.trim(),\n    phone: phone.value.trim(),\n    email: email.value.trim(),\n    comment: comment.value.trim(),\n  };\n\n  localStorage.setItem(ORDER_FORM_KEY, JSON.stringify(orderFormState));\n\n  if (\n    name.value.trim() !== '' &&\n    phone.value.trim() !== '' &&\n    email.value.trim() !== ''\n  )\n    refs.modalOrderSubmitBtn.disabled = false;\n}\n\n// Check localStorage after page reload and get last saved data (or empty fields otherwise)\nfunction onClickPageReload() {\n  const storageData = JSON.parse(localStorage.getItem(ORDER_FORM_KEY)) || {};\n  const { name, phone, email, comment } = storageData;\n  if (storageData) {\n    refs.modalOrderForm.elements.name.value = name || '';\n    refs.modalOrderForm.elements.phone.value = phone || '';\n    refs.modalOrderForm.elements.email.value = email || '';\n    refs.modalOrderForm.elements.comment.value = comment || '';\n  }\n  if (name === '' || phone === '' || email === '') {\n    refs.modalOrderSubmitBtn.disabled = true;\n  }\n}\n\n// Clean localStorage and form inputs after form submit\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  const { name, phone, email, comment } = evt.currentTarget.elements;\n\n  const nameValue = name.value.trim();\n  const phoneValue = phone.value.trim();\n  const emailValue = email.value.trim();\n  const commentValue = comment.value.trim();\n\n  // Validate name: Allow only letters and spaces\n  const namePattern = /^[a-zA-Zа-яА-Я ]+$/;\n  if (!namePattern.test(nameValue)) {\n    // Invalid name format\n    Notiflix.Report.failure('Error', 'Please enter a valid name.', 'Ok');\n    return;\n  }\n\n  // Validate phone number: Use specific pattern for +380000000000 format\n  const phonePattern = /^\\+\\d{12}$/;\n  if (!phonePattern.test(phoneValue)) {\n    // Invalid phone number format\n    Notiflix.Report.failure(\n      'Error',\n      'Please enter a valid phone number in the format +380000000000.',\n      'Ok'\n    );\n    return;\n  }\n\n  // Validate email: Use regular expression for email format\n  const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailPattern.test(emailValue)) {\n    // Invalid email format\n    Notiflix.Report.failure(\n      'Error',\n      'Please enter a valid email address.',\n      'Ok'\n    );\n    return;\n  }\n\n  // Validate comment: Limit maximum characters to 200\n  const maxCommentLength = 200;\n  if (commentValue.length > maxCommentLength) {\n    Notiflix.Report.failure(\n      'Error',\n      `Please limit the comment to ${maxCommentLength} characters.`,\n      'Ok'\n    );\n    return;\n  }\n\n  const postToAdd = {\n    name: nameValue,\n    phone: phoneValue,\n    email: emailValue,\n    comment: commentValue,\n  };\n\n  // Log the data being sent to the server\n  // console.log('Data sent to server:', postToAdd);\n\n  // Show loader before sending the request\n  Notiflix.Loading.standard('Sending your order...');\n\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(postToAdd),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  fetch('https://tasty-treats-backend.p.goit.global/api/orders/add', options)\n    .then(response => {\n      if (response.status === 201) {\n        // Successful response, order created\n        // You may also want to parse the response JSON if the backend sends additional data\n        return response.json();\n      } else if (response.status >= 400 && response.status < 500) {\n        // Client-side error (4xx) - Bad Request or Validation Error\n        throw new Error('Bad Request');\n      } else {\n        // Other server-side error (5xx) - Internal Server Error\n        throw new Error('Server Error');\n      }\n    })\n    .then(data => {\n      console.log('Data received from server:', data);\n      // Show success message using Notiflix\n      Notiflix.Report.success(\n        'Your order has completed successfully!',\n        '',\n        'Ok',\n        {\n          position: 'center-top',\n          titleMaxLength: '100',\n        }\n      );\n      onToggleModalOrder();\n    })\n    .catch(error => {\n      console.error('Error:', error);\n      // Show error message using Notiflix\n      Notiflix.Report.failure(\n        'Error',\n        'An error occurred while submitting the order. Please try again later.',\n        'Ok'\n      );\n    })\n    .finally(() => {\n      // Hide the loader after request completion\n      Notiflix.Loading.remove();\n    });\n}\n"],"names":["$tgDFu","parcelRequire","$7Y9D8","$6d8e537b81adceb8$var$refs","closeModalOrderBtn","document","querySelector","modalOrder","modalOrderForm","modalOrderSubmitBtn","$6d8e537b81adceb8$var$onToggleModalOrder","classList","toggle","contains","reset","addEventListener","evt","name","phone","email","comment","currentTarget","elements","orderFormState","value","trim","localStorage","setItem","JSON","stringify","disabled","preventDefault","nameValue","phoneValue","emailValue","commentValue","test","$parcel$interopDefault","Report","failure","length","postToAdd","Loading","standard","options","method","body","headers","fetch","then","response","status","json","Error","data","console","log","success","position","titleMaxLength","catch","error","finally","remove","setTimeout","onToggleModalOrder1","querySelectorAll","forEach","button","storageData","parse","getItem","$6d8e537b81adceb8$var$onClickPageReload","$3e557cf2df4cc86d$var$apiRecipe","default","$3e557cf2df4cc86d$var$cartWrapper","limit","async","resp","takeValues","thumb","area","rating","description","title","category","results","markUpCart","map","obj","join","innerHTML","$3e557cf2df4cc86d$var$fillCart","getRecipe","$2Dfe2","notifyError","$3e557cf2df4cc86d$var$fillCartWrap"],"version":3,"file":"cart.59f0dc12.js.map"}