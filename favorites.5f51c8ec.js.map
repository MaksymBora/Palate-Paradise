{"mappings":"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","sources":["src/favorites.js","src/js/favorite/favorite-main.js","src/js/favorite/constants.js","src/js/favorite/localStorageUtils.js","src/js/favorite/handleCategotyFilter.js","src/js/favorite/utils.js","src/js/favorite/pagination.js","src/js/favorite/display-favorites.js","src/js/favorite/updateCategoryList.js","src/js/favorits-scroll.js"],"sourcesContent":["import './js/mobile-menu';\nimport './js/favorite/favorite-main';\nimport './js/cart/cart';\nimport './js/favorits-scroll';\nimport './js/modals/modal-recipes.js';\n","import RecipeApiService from '../service/service-api';\nimport refs from './constants';\nimport { getFromLocalStorage } from '../favorite/localStorageUtils';\nimport { handleCategoryFilter } from '../favorite/handleCategotyFilter';\nimport { displayFavorites } from '../favorite/display-favorites';\nimport {\n  updateCategoryList,\n  renderCategories,\n} from '../favorite/updateCategoryList';\nimport { showLoader, hideLoader } from '../loader';\n\nconst recipeApiSeriсe = new RecipeApiService();\n\n//\n// Add accent color on load page.\n//\nfunction modifyClassesOnLoad() {\n  const links = document.querySelectorAll('.menu-nav-links');\n\n  if (links[0].classList.contains('header-accent')) {\n    links[0].classList.remove('header-accent');\n\n    if (links.length > 1) {\n      links[1].classList.add('header-accent');\n    }\n  }\n}\n\n// Вызываем функцию при загрузке страницы\nwindow.addEventListener('load', modifyClassesOnLoad);\n\n// ---------------------------------------\n// Imitation adding data to LocalStorage\n// ---------------------------------------\nrecipeApiSeriсe.getRecipe().then(response => {\n  const arr = response.results;\n\n  const FAV_DATA = 'favorites-data';\n  const toStorage = [];\n\n  for (let i = 0; i < 6; i++) {\n    const { _id, title, category, rating, preview, description } = arr[i];\n    for (let j = 0; j < 5; j++) {\n      toStorage.push({\n        _id,\n        title,\n        category,\n        rating,\n        preview,\n        description,\n      });\n    }\n  }\n\n  localStorage.setItem(FAV_DATA, JSON.stringify(toStorage));\n});\n\n/**\n * Refreshes the favorite recipes page.\n * Generates category markup and the \"All categories\" button based on the saved data in localStorage.\n * Then displays the favorite recipes.\n */\nfunction onFavoritesReload() {\n  showLoader();\n\n  const categoryMarkup = createCategoryList();\n  const allCatBtn = `<button class=\"fav-button common-btn is-active\" name=\"main-cat-btn\">All categories</button>`;\n\n  const data = getFromLocalStorage('favorites-data');\n  refs.recipesListContainer.innerHTML = '';\n  refs.categoriesContainer.innerHTML =\n    data && data.length ? `${allCatBtn}${categoryMarkup}` : '';\n\n  displayFavorites();\n\n  hideLoader();\n}\n\n/**\n * Generates the markup for the list of unique categories from favorites data stored in localStorage.\n * {string} The category list markup or an empty string if there is no data.\n */\nfunction createCategoryList() {\n  const storage = localStorage.getItem('favorites-data');\n  const data = JSON.parse(storage);\n\n  if (!data || data.length === 0) return '';\n\n  const uniqueCategories = data\n    .flatMap(recipe => recipe.category)\n    .filter((category, index, array) => array.indexOf(category) === index);\n  return uniqueCategories.reduce(\n    (categoryMarkup, category) => categoryMarkup + renderCategories(category),\n    ''\n  );\n}\n\n/**\n * Removes the favorite recipe from localStorage and reloads the favorites list.\n *  currentBtn - The current button element representing the favorite recipe.\n */\nfunction removeFavorite(currentBtn) {\n  const recipeInfo = JSON.parse(currentBtn.dataset.info);\n  const storage = JSON.parse(localStorage.getItem('favorites-data'));\n  localStorage.setItem(\n    'favorites-data',\n    JSON.stringify(storage.filter(el => el.id !== recipeInfo.id))\n  );\n  onFavoritesReload();\n}\n\n/**\n * Handles the click event on the recipe buttons in the favorites view.\n * event - The click event object.\n */\nfunction handleRecipeButtonEvent({ target }) {\n  if (!target.closest('button')) return;\n  const currentBtn = target.closest('button');\n\n  if (currentBtn.name === 'favorites-data') {\n    removeFavorite(currentBtn);\n    updateCategoryList(target);\n  }\n  if (currentBtn.name === 'details') {\n    console.log('modal here');\n  }\n}\n\n// Add event listeners to the corresponding elements when the DOM is fully loaded.\n\n// Event listener for handling recipe button clicks in the favorites view.\nrefs.renderedRecipesBox.addEventListener('click', handleRecipeButtonEvent);\n\n// Event listener for handling category filter clicks in the favorites view.\nrefs.categoriesList.addEventListener('click', handleCategoryFilter);\n\n// Event listener for reloading the favorites view when the DOM is fully loaded.\ndocument.addEventListener('DOMContentLoaded', onFavoritesReload);\n","const refs = {\n  recipesListContainer: document.querySelector('.fav-list'),\n  categoriesContainer: document.querySelector('.fav-categories'),\n  noFavoritesMessage: document.querySelector('.fav-empty'),\n  paginationElement: document.getElementById('pagination'),\n  allButton: document.querySelector('.common-btn'),\n  categoriesList: document.querySelector('.fav-categories'),\n  renderedRecipesBox: document.getElementById('fav-rendered-card'),\n  heroImage: document.querySelector('.fav-hero'),\n};\n\nexport default refs;\n","export function saveToLocalStorage(key, data) {\n  localStorage.setItem(key, JSON.stringify(data));\n}\n\nexport function getFromLocalStorage(key) {\n  const data = localStorage.getItem(key);\n  return JSON.parse(data);\n}\n","import refs from './constants';\nimport { countPage, groupArrayIntoChunks } from '../favorite/utils';\nimport { renderingFavRec } from '../favorite/rendering-fav';\nimport createPagination from '../favorite/pagination';\nimport { displayFavorites } from '../favorite/display-favorites';\nimport { showLoader, hideLoader } from '../loader';\n\nlet currentBtn = '';\n\n/**\n * Toggles the 'is-active' class on the target element.\n */\nfunction toggleActiveClass({ target }) {\n  const btn = document.querySelector('.is-active');\n  if (!btn) refs.allButton.classList.add('is-active');\n  else btn.classList.remove('is-active');\n  target.classList.add('is-active');\n}\n\n/**\n * Handles the category filter event.\n * {Event} evt - The event object.\n */\nexport function handleCategoryFilter(evt) {\n  showLoader();\n\n  if (evt.target.classList.contains('is-active')) return;\n\n  let data = [];\n  let categoryRecipes;\n  refs.recipesListContainer.innerHTML = '';\n\n  if (evt !== Number(evt) && evt.target.nodeName === 'BUTTON') {\n    toggleActiveClass(evt);\n    currentBtn =\n      evt.target.name === 'main-cat-btn' ? '' : evt.target.textContent;\n  }\n\n  const storage = localStorage.getItem('favorites-data');\n  data = JSON.parse(storage);\n\n  if (!data || data.length === 0) {\n    refs.categoriesContainer.style.display = 'none';\n    return;\n  }\n\n  if (!currentBtn) {\n    displayFavorites();\n    return;\n  }\n\n  categoryRecipes = [...data.filter(recipe => recipe.category === currentBtn)];\n\n  let pageSet = 1;\n\n  if (Number(evt) === evt) pageSet = evt;\n\n  const perPage = countPage();\n  const objData = groupArrayIntoChunks(categoryRecipes, perPage);\n  const totalPages = Object.keys(objData).length;\n\n  refs.paginationElement.style.display = totalPages > 1 ? 'block' : 'none';\n  createPagination(pageSet, perPage, totalPages, displayFavorites);\n\n  const listMarkup = objData[pageSet].reduce(\n    (markup, { title, description, preview, rating, id, category }) =>\n      markup +\n      renderingFavRec(title, description, preview, rating, id, category),\n    ''\n  );\n\n  refs.recipesListContainer.innerHTML = listMarkup;\n\n  hideLoader();\n}\n","// Calculates the number of items per page\nexport function countPage() {\n  return window.innerWidth < 768 ? 9 : 12;\n}\n\n/**\n * Groups an array into chunks of a specified size.\n *\n *  array - The array to be grouped into chunks.\n *  chunkSize - The size of each chunk(Part).\n * {Object} An object containing the grouped chunks, with chunk numbers as keys.\n */\nexport function groupArrayIntoChunks(array, chunkSize) {\n  const groupedChunks = {};\n  for (let i = 0; i < array.length; i += chunkSize) {\n    const chunkNumber = Math.floor(i / chunkSize) + 1;\n    groupedChunks[chunkNumber] = array.slice(i, i + chunkSize);\n  }\n  return groupedChunks;\n}\n","import Pagination from 'tui-pagination';\nimport 'tui-pagination/dist/tui-pagination.css';\n\nfunction resizeVisPage() {\n  const screenWidth = window.innerWidth;\n  return screenWidth < 768 ? 2 : 3;\n}\n\nfunction createPagination(page, perPage, totalPages, callback) {\n  const options = {\n    totalItems: perPage * totalPages,\n    itemsPerPage: perPage,\n    visiblePages: resizeVisPage(),\n    page,\n    centerAlign: false,\n    omitMiddlePages: false,\n    firstItemClassName: 'tui-first-child',\n    lastItemClassName: 'tui-last-child',\n    template: {\n      page: '<a href=\"#\" class=\"tui-page-btn pag-page\">{{page}}</a>',\n      currentPage:\n        '<strong class=\"tui-page-btn tui-is-selected\">{{page}}</strong>',\n      moveButton:\n        '<a href=\"#\" class=\"tui-page-btn tui-{{type}} move-button\">' +\n        '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n        '</a>',\n      disabledMoveButton:\n        '<span class=\"tui-page-btn tui-is-disabled tui-{{type}} prev-button\">' +\n        '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n        '</span>',\n      moreButton:\n        '<a href=\"#\" class=\"tui-page-btn tui-{{type}}-is-ellip more-button\">' +\n        '<span class=\"tui-ico-ellip\">...</span>' +\n        '</a>',\n    },\n  };\n\n  const pagination = new Pagination('pagination', options);\n\n  pagination.on('afterMove', ({ page }) => {\n    callback(page);\n  });\n}\n\nexport default createPagination;\n","import refs from './constants';\nimport { getFromLocalStorage } from '../favorite/localStorageUtils';\nimport { countPage, groupArrayIntoChunks } from '../favorite/utils';\nimport createPagination from '../favorite/pagination';\nimport { renderingFavRec } from '../favorite/rendering-fav';\nimport { showLoader, hideLoader } from '../loader';\n\nexport function displayFavorites(pageSet = 1) {\n  showLoader();\n\n  const data = getFromLocalStorage('favorites-data');\n\n  // Show or hide the \"All\" button based on whether there is data in localStorage.\n  refs.allButton.style.display = data && data.length ? 'block' : 'none';\n\n  // Display a message and hide the \"All\" button if there is no data in localStorage or the data array is empty.\n  if (!data || data.length === 0) {\n    refs.noFavoritesMessage.classList.remove('visually-hidden');\n    refs.allButton.classList.add('visually-hidden');\n    if (window.innerWidth < 768)\n      refs.heroImage.classList.add('visually-hidden');\n    return;\n  }\n\n  const perPage = countPage();\n  const objData = groupArrayIntoChunks(data, perPage);\n  const totalPages = Object.keys(objData).length;\n\n  refs.paginationElement.style.display = totalPages > 1 ? 'block' : 'none';\n  createPagination(pageSet, perPage, totalPages, displayFavorites);\n\n  const listMarkup = objData[pageSet]\n    .map(({ title, description, preview, rating, id, category }) =>\n      renderingFavRec(title, description, preview, rating, id, category)\n    )\n    .join('');\n\n  refs.recipesListContainer.innerHTML = listMarkup;\n  refs.noFavoritesMessage.classList.add('visually-hidden');\n\n  hideLoader();\n}\n","import { getFromLocalStorage } from '../favorite/localStorageUtils';\nimport { showLoader, hideLoader } from '../loader';\n\n/**\n * Generates the markup for a category button.\n * {string} category - The category name.\n * return {string} The category button markup.\n */\nexport function renderCategories(category) {\n  return `<button class=\"fav-button\">${category}</button>`;\n}\n\n/**\n * Updates the category list in the favorites view based on the selected recipe's category.\n *  target - The target element representing the selected recipe.\n */\nexport function updateCategoryList(target) {\n  showLoader();\n\n  const currentRec = target.closest('div.recipe-item').dataset.category;\n  const storageItems = getFromLocalStorage('favorites-data');\n  const isCategoryLocal = storageItems.find(el => el.category === currentRec);\n  const isCategoryRendered = [...refs.categoriesContainer.children].find(\n    el => el.textContent === currentRec\n  );\n\n  if (!isCategoryLocal && isCategoryRendered) isCategoryRendered.remove();\n  else if (isCategoryLocal && !isCategoryRendered)\n    refs.categoriesContainer.insertAdjacentHTML(\n      'beforeend',\n      renderCategories(currentRec)\n    );\n\n  refs.allButton.style.display =\n    storageItems && storageItems.length ? 'block' : 'none';\n\n  hideLoader();\n}\n","const scrollToTopBtn = document.querySelector('.scroll-to-top');\n\nfunction scrollToTop() {\n  window.scrollTo({\n    top: 0,\n    behavior: 'smooth',\n  });\n}\n\nscrollToTopBtn.addEventListener('click', scrollToTop);\n\nwindow.addEventListener('scroll', () => {\n  if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\n    setTimeout(() => {\n      scrollToTopBtn.style.display = 'block';\n    }, 500);\n  } else {\n    scrollToTopBtn.style.display = 'none';\n  }\n});\n"],"names":["parcelRequire","$d3Gjh","$456b4efabf03b523$export$2e2bcd8739ae039","recipesListContainer","document","querySelector","categoriesContainer","noFavoritesMessage","paginationElement","getElementById","allButton","categoriesList","renderedRecipesBox","heroImage","$3a34280a53c04ab7$export$602bc7b349337fec","key","data","localStorage","getItem","JSON","parse","$8nrFW","$319ca2c7fb7e9c69$export$8242f68f012ef212","window","innerWidth","$319ca2c7fb7e9c69$export$56232b55f4742cda","array","chunkSize","groupedChunks","i","length","Math","floor","slice","$1VFfL","$7a2083ed1e71428f$export$2e2bcd8739ae039","page","perPage","totalPages","callback","options","totalItems","itemsPerPage","visiblePages","centerAlign","omitMiddlePages","firstItemClassName","lastItemClassName","template","currentPage","moveButton","disabledMoveButton","moreButton","$parcel$interopDefault","on","param","_$page","$13da8db5e898e272$export$4c708a11c3ac73b5","pageSet","arguments","$kvC6y","showLoader","style","display","classList","remove","add","objData","Object","keys","listMarkup","map","title","description","preview","rating","id","category","$2lkGM","renderingFavRec","join","innerHTML","hideLoader","$f1ec916d23661196$var$currentBtn","$c03df47b46ce8e4c$export$f20c709553293f6e","concat","$c03df47b46ce8e4c$export$5386e614270b0ccf","target","currentRec","closest","dataset","storageItems","isCategoryLocal","find","el","isCategoryRendered","refs","children","textContent","insertAdjacentHTML","default","$b60f03cd1e1dbfd2$var$onFavoritesReload","categoryMarkup","storage","flatMap","recipe","filter","index","indexOf","reduce","$b60f03cd1e1dbfd2$var$createCategoryList","addEventListener","links","querySelectorAll","contains","getRecipe","then","response","arr","results","toStorage","_i","_id","j","push","setItem","stringify","currentBtn","name","recipeInfo","info","$b60f03cd1e1dbfd2$var$removeFavorite","console","log","evt","categoryRecipes","btn","Number","nodeName","markup","$d3a4a1bb745b7ddd$var$scrollToTopBtn","scrollTo","top","behavior","innerHeight","scrollY","body","offsetHeight","setTimeout"],"version":3,"file":"favorites.5f51c8ec.js.map"}